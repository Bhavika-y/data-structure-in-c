#include<stdio.h>
#include<stdlib.h>
struct Node{
    int data;
    struct Node* next;
}*rear=NULL , *front=NULL ;

void enqueue(int value){
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    if(temp==NULL)
    printf("Queue overflow!!\n");
    else{
        temp->data=value;
        temp->next=NULL ;
       if(front==NULL)
       front=rear=temp;
       else{
       rear->next=temp;
       rear=temp;
    }
    printf("%d inserted in queue\n",value);
    }
}
int dequeue(){
    if(front==NULL){
    printf("Queue is empty!!\n");
    return -1;
    }
    else{
        int value=front->data ;
        struct Node* temp=front ;
        front=front->next ;
       if(front==NULL)
       rear=NULL ;
        free(temp);
        printf("%d deleted from queue\n",value);
         return value;
        }
    }
int peek(){
    if(front==NULL){
        printf("Queue is empty!!\n");
        return -1;
        }
        else{
            return front->data ;
            }
}
void show(){
    if(front==NULL){
        printf("Queue is empty");
    
    }
    else{
       printf("queue elements are:");
       struct Node* temp = front;
       while(temp!=NULL){
        printf("%d\n",temp->data);
        temp=temp->next;
       }
    }
}
int main(){
    while(1){
        printf("1.Push\n");
        printf("2.Pop\n");
        printf("3.Peek\n");
        printf("4.Show\n");
        printf("5.Exit\n");
        int choice,val;
        printf("enter choice:");
        scanf("%d",&choice);
        switch (choice)
        {
        case 1:
        printf("enter value");
        scanf("%d",&val);
        enqueue(val);
            break;
        case 2:
        val=dequeue();
        if(val!=-1)
        printf("%d remove from stack\n",val);
            break;
        case 3:
        val=peek();
        if(val!=-1)
        printf("Top element in stack is %d\n",val);
            break;
        case 4:
        show();
            break;       
        case 5:
            exit(0);
        default:
            printf("invalid choice!");
        }
        printf("\n");
        system("pause");
    }
}
