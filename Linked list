#include<stdio.h>
#include<stdlib.h>
typedef struct node{
    int data;
    struct node *next;
} Node;
Node*  head=NULL;
Node* createNode(int ele){
    Node *newNode = (Node*)malloc(sizeof(Node));
    newNode->data = ele;
    newNode->next = NULL;
    return newNode;
}
void insertNodeInBeg(int ele){
    Node* newNode= createNode(ele);
    newNode->next = head;
    head = newNode;
      printf("Node Inserted\n");
}
void insertNodeAtend(int ele){
Node* newNode = createNode(ele);
    if(head==NULL)
   head=newNode;
    else{
        Node *temp = head;
        while(temp->next!=NULL){
          temp = temp->next;
        }
      temp->next = newNode;
    }
    printf("Node inserted\n");
}
void insertNodeAtAnyPos(int ele,int pos){
    Node* newNode = createNode(ele);
    if(head==NULL)
    printf("list is empty");
    else if(pos==1){
        insertNodeInBeg(ele);
    }
    else{
        Node *newNode= createNode(ele);
        Node* temp=head;
        int i=1;
        while (i<pos-1 && temp -> next!=NULL){
            temp = temp->next;
            i++;
        }
       if(temp->next!=NULL && i>1){
        newNode->next = temp->next;
        temp->next = newNode;
        printf("node inserted\n");
       }
       else
       printf("invalid position");
    }
}
void deletenodefrombeg(){
    if(head==NULL){
        printf("list is empty");
        }
        else{
            Node* temp = head;
            head = head->next;
            free(temp);
            printf("node deleted\n");
        }
}
void deletenodefromend(){
    if(head==NULL){
        printf("list is empty");
        }
else{
Node* t;
if (head-> next == NULL){
t=head;
}
else{
    Node* temp = head;
    while (temp->next-> next!= NULL){
        temp = temp->next;
    }
    t= temp->next;
    temp->next=NULL;
}
free(t);
printf("node deleted\n");
}
}
 void deletenodefromnypos(int pos){
    if(head==NULL){
        printf("list is empty");
        }
        else{
      int i=1;
      Node* temp=head;
      while (i<pos-1 && temp->next!=NULL)
      {
        i++;
        temp=temp->next;
      }
      if(temp->next!=NULL && pos>0){
        Node* t = temp->next;
        temp->next = temp->next->next;
        free(t);
        printf("node deleted\n");
      }
      else{
        printf("Invalid position!!");
      }
      
 }
}
void search(int target){
    if(head== NULL){
        printf("list is empty");
    }
    else{
        Node* temp = head;
        while (temp != NULL){
            if (temp->data == target){
                printf("node found\n");
}
    printf("node not found\n");
}
    }
  
}
 void sort(){
    Node* last=NULL;
  for(Node* i = head;i->next!=NULL;i=i->next){
    Node* j;
    for(j = head; j->next!=last;j=j->next){
        if(j->data>j->next->data){
            int temp = j->data;
            j->data = j->next->data;
            j->next->data = temp;
        }
    }
    last=j;
 }  
    printf("list sorted\n");
 }
     
void display(){
    if(head==NULL)
        printf("List is empty\n");
    else{
        printf("elements are:\n");
       Node* temp=head;
        while(temp != NULL){
            printf("%d ",temp->data);
            temp=temp->next;
           }
       }
     
}
int main(){
    while(1){
        printf("----Singly Linked List------\n");
        printf("1. Insert node in beginning\n");
        printf("2. Insert node at end\n");
        printf("3. Insert node at specific position\n");
        printf("4. Delete node from beginning\n");  
        printf("5. Delete node from end\n");
        printf("6. Delete node at specific position\n");
        printf("7. Search elements in the list\n");
        printf("8. Sort elements\n");
        printf("9. Display the list\n");
        printf("10. Exit\n");
        int choice,value,pos;
        printf("ENTER CHOICE:");
        scanf("%d",&choice);

        switch(choice){
        case 1:
        printf("enter value:");
        scanf("%d",&value);
        insertNodeInBeg(value);
            break;
        case 2:
        printf("enter value:");
        scanf("%d",&value);
        insertNodeAtend(value);
            break;
        case 3:
            printf("enter value:");
            scanf("%d",&value);
            printf("enter position:");
            scanf("%d",&pos);
            insertNodeAtAnyPos(value,pos);
            break;  
        case 4:
            deletenodefrombeg();
            break; 
        case 5:
            deletenodefromend();
            break;
        case 6:
            printf("enter position:");
            scanf("%d",&pos);
            deletenodefromnypos(pos);
            break;
        case 7:
            printf("enter value to search:");
            scanf("%d",&value);
            search(value);
            break;
        case 8:
        sort();
            break;
        case 9:
            display();
            break;
            case 10:
         exit(0);

        default:
         printf("invalid choice\n");
        }
        printf("\n");
    }
    return 0;
}
