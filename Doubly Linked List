#include<stdio.h>
#include<stdlib.h>
struct Node{
    struct Node*prev;
    int data;
    struct Node*next;
};
struct Node* head=NULL;
struct Node* createNode(int ele){
    struct Node* newNode=(struct Node*)malloc(sizeof(struct Node));
    newNode->data=ele;
    newNode->next=newNode->prev=NULL;
    return newNode;
        
    }
    void insertNodeInBeg(int ele){
    struct Node* newNode=createNode(ele);
        if(head==NULL)
        head=newNode;
        else{
            newNode->next=head;
            head->prev=newNode;
            head=newNode;
        }
        printf("Node inserted!!!!\n");
    }
    void insertNodeAtEnd(int ele){
        struct Node*newNode=createNode(ele);
        if(head==NULL)
        head=newNode;
        else{
            struct Node* temp=head;
            while(temp->next!=NULL){
                temp=temp->next;
            }
            temp->next=newNode;
            newNode->prev=temp;
        }
        printf("Node Inderted!!!!");
    }
    void insertAtAnyPos(int ele,int pos){
        if(head==NULL)
        printf("list is empty\n");
    
    else if(pos==1){
        insertNodeInBeg(ele);
    } 
    else{
        struct Node* newNode=createNode(ele);
        struct Node* temp=head;
        int i=1;
        while(i<pos && temp->next!=NULL){
            temp=temp->next;
            i++;
        }

        if(temp!= NULL && pos>1){
        newNode->next=temp->next;
        newNode->prev=temp;
        temp->next->prev=newNode;
        temp->next=newNode;
        printf("node inserted\n");
    }
    else{
        printf("Invalid position\n");
    }
}    
  }                       

void deleteNodeFromBeg(){
    if(head==NULL)
        printf("List is empty\n");
        
        else{
            struct Node *temp=head;
            head=head->next;
            if(head!=NULL)
            head->prev=NULL;
            free(temp);
            printf("Node deleted from beg\n");
        }
}
void  deleteNodeFromEnd(){
    if(head==NULL)
    printf("List is empty\n");
    else {
        struct Node* temp=head;
        while(temp->next!=NULL){
        temp=temp->next;
        }
        if(temp->prev!=NULL)
            temp->prev->next=NULL;
        else
        head=NULL;
        free(temp);
        printf("Node Deleted\n");
    }
}
void deleteNodeAtPos(int pos){
    if(head==NULL)
    
    printf("List is empty\n");
    else if(pos==1)
            deleteNodeFromBeg();

  
else{
    int i=1;
    struct Node* temp=head; 
while(i!=pos && temp!=NULL){
    i++;
    temp=temp->next;
}
if(temp!=NULL){
    temp->prev->next=temp->next;
    if(temp->next!=NULL)
    temp->next->prev=temp->prev;
    free(temp);
}

   else
    printf("Node deleted at position %d\n",pos);
}
}
void search(int ele){
    if(head==NULL)
        printf("List is Empty!!\n");
    else{
        Node* temp=head;
        int i=0;
        while(temp!=NULL){
            i++;
            if(temp->data==ele){
                printf("Found at %d position!!!\n",i);
                return;
            }
            temp=temp->next;
        }
        printf("Not Found!!\n");
    }
}
void display(){
    if(head==NULL)
        printf("List is Empty!!\n");
    else{
        printf("Elements are:\n");
        for(Node* temp=head;temp!=NULL;temp=temp->next){
            printf("%d ",temp->data);
        }
    }
}

int main(){
    while(1){
        printf("----Doubly Linked List----\n");
        printf("1. Insert Node In Begnining\n");
        printf("2. Insert Node At End\n");
        printf("3. Insert Node At Any Position\n");
        printf("4. Delete Node From Begining\n");
        printf("5. Delete Note From End\n");
        printf("6. Delete Node From Any Position\n");
        printf("7. Search Element In List\n");
        printf("8. Display List\n");
        printf("9. Exit\n");
        int choice,value,pos;
        printf("Enter Choice:");
        scanf("%d",&choice);
        switch(choice){
            case 1:
            printf("Enter Value:");
            scanf("%d",&value);
            insertNodeInBeg(value);
            break;
            case 2:
            printf("Enter Value:");
             scanf("%d",&value);
             insertNodeAtEnd(value);  
            break;
            case 3:
             printf("Enter Value:");
             scanf("%d",&value);
             printf("Enter Position:");
             scanf("%d",&pos);
            insertAtAnyPos(value,pos);
            break;
            case 4:
            deleteNodeFromBeg();  
            break;
            case 5:
            deleteNodeFromEnd();
            break;
            case 6:
            printf("Enter Position:");
            break;
            case 7:
            break;
            case 8:
            //display();
            break;
            case 9:
            exit(0);
            default:
            printf("Invalid choice !!!!\n");
        } 
    }



    return 0;

    }
    
